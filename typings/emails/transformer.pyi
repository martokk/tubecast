"""
This type stub file was generated by pyright.
"""

from premailer import Premailer
from .store import LazyHTTPFile, MemoryFileStore

class LocalPremailer(Premailer):
    def __init__(self, html, local_loader=..., attribute_name=..., **kw) -> None:
        ...



class HTMLParser:
    _cdata_regex = ...
    _xml_title_regex = ...
    default_parser_method = ...
    default_output_method = ...
    def __init__(self, html, method=..., output_method=...) -> None:
        ...

    @property
    def html(self): # -> Unknown | str:
        ...

    @property
    def tree(self): # -> Any:
        ...

    def to_string(self, encoding=..., **kwargs): # -> str:
        ...

    def apply_to_images(self, func, images=..., backgrounds=..., styles_uri=...): # -> None:
        ...

    def apply_to_links(self, func): # -> None:
        ...

    def add_content_type_meta(self, content_type=..., charset=..., element_cls=...): # -> None:
        ...

    def save(self, **kwargs): # -> None:
        ...



class BaseTransformer(HTMLParser):
    UNSAFE_TAGS = ...
    attachment_store_cls = MemoryFileStore
    attachment_file_cls = LazyHTTPFile
    html_attribute_name = ...
    def __init__(self, html, local_loader=..., attachment_store=..., requests_params=..., method=..., base_url=...) -> None:
        ...

    def get_absolute_url(self, url):
        ...

    def attribute_value(self, el): # -> None:
        ...

    _attribute_value = ...
    def get_premailer(self, **kw): # -> LocalPremailer:
        ...

    @property
    def premailer(self): # -> LocalPremailer:
        ...

    def remove_unsafe_tags(self): # -> Self@BaseTransformer:
        ...

    def load_and_transform(self, css_inline=..., remove_unsafe_tags=..., make_links_absolute=..., set_content_type_meta=..., update_stylesheet=..., load_images=..., images_inline=..., **kw): # -> Self@BaseTransformer:
        ...

    def make_all_images_inline(self): # -> Self@BaseTransformer:
        ...

    def synchronize_inline_images(self, inline_names=..., non_inline_names=...): # -> Self@BaseTransformer:
        """
        Set img src in html for images, marked as "inline" in attachments_store
        """
        ...



class Transformer(BaseTransformer):
    ...


class MessageTransformer(BaseTransformer):
    def __init__(self, message, **kw) -> None:
        ...

    def save(self): # -> None:
        ...
