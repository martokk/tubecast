"""
This type stub file was generated by pyright.
"""

from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from .compat import is_py2

_charsets_loaded = ...
CHARSETS_FIX = ...
def load_email_charsets(): # -> None:
    ...

class cached_property:
    """
    A property that is only computed once per instance and then replaces itself
    with an ordinary attribute. Deleting the attribute resets the property.
    Source: https://github.com/bottlepy/bottle/commit/fa7733e075da0d790d809aa3d2f53071897e6f76
    """
    def __init__(self, func) -> None:
        ...

    def __get__(self, obj, cls): # -> Self@cached_property:
        ...



class CachedDnsName:
    def __str__(self) -> str:
        ...

    def get_fqdn(self): # -> str:
        ...



DNS_NAME = ...
def decode_header(value, default=..., errors=...):
    """Decode the specified header value"""
    ...

class MessageID:
    """Returns a string suitable for RFC 2822 compliant Message-ID, e.g:
    <20020201195627.33539.96671@nightshade.la.mastaler.com>
    Optional idstring if given is a string used to strengthen the
    uniqueness of the message id.
    Based on django.core.mail.message.make_msgid
    """
    def __init__(self, domain=..., idstring=...) -> None:
        ...

    def __call__(self): # -> str:
        ...



def parse_name_and_email_list(elements, encoding=...): # -> list[tuple[Unknown | str | bytes | None, Unknown | str | bytes | None]]:
    """
    Parse a list of address-like elements, i.e.:
     * "name <email>"
     * "email"
     * (name, email)

    :param elements: one element or list of elements
    :param encoding: element encoding, if bytes
    :return: list of pairs (name, email)
    """
    ...

def parse_name_and_email(obj, encoding=...): # -> tuple[Unknown | str | bytes | None, Unknown | str | bytes | None]:
    ...

def sanitize_email(addr, encoding=..., parse=...): # -> str:
    ...

def sanitize_address(addr, encoding=...): # -> str:
    ...

class MIMEMixin:
    def as_string(self, unixfrom=..., linesep=...): # -> str:
        """Return the entire formatted message as a string.
        Optional `unixfrom' when True, means include the Unix From_ envelope
        header.
        This overrides the default as_string() implementation to not mangle
        lines that begin with 'From '. See bug #13433 for details.
        """
        ...

    if is_py2:
        as_bytes = ...
    else:
        def as_bytes(self, unixfrom=..., linesep=...): # -> bytes:
            """Return the entire formatted message as bytes.
            Optional `unixfrom' when True, means include the Unix From_ envelope
            header.
            This overrides the default as_bytes() implementation to not mangle
            lines that begin with 'From '. See bug #13433 for details.
            """
            ...



class SafeMIMEText(MIMEMixin, MIMEText):
    def __init__(self, text, subtype, charset) -> None:
        ...



class SafeMIMEMultipart(MIMEMixin, MIMEMultipart):
    def __init__(self, _subtype=..., boundary=..., _subparts=..., encoding=..., **_params) -> None:
        ...



DEFAULT_REQUESTS_PARAMS = ...
def fetch_url(url, valid_http_codes=..., requests_args=...): # -> Response:
    ...

def encode_header(value, charset=...): # -> str:
    ...

def renderable(f): # -> (self: Unknown, *args: Unknown, **kwargs: Unknown) -> (Any | Unknown):
    ...

def format_date_header(v, localtime=...): # -> str:
    ...
