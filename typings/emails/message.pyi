"""
This type stub file was generated by pyright.
"""

from .utils import cached_property, renderable
from .backend import ObjectFactory, SMTPBackend
from .store import BaseFile, MemoryFileStore
from .signers import DKIMSigner

class BaseMessage:
    """
    Base email message with html part, text part and attachments.
    """
    attachment_cls = BaseFile
    filestore_cls = MemoryFileStore
    policy = ...
    def __init__(self, charset=..., message_id=..., date=..., subject=..., mail_from=..., mail_to=..., headers=..., html=..., text=..., attachments=..., cc=..., bcc=..., headers_encoding=...) -> None:
        ...

    def set_mail_from(self, mail_from): # -> None:
        ...

    def get_mail_from(self): # -> tuple[Unknown | str | bytes | None, Unknown | str | bytes | None] | None:
        ...

    mail_from = ...
    def set_mail_to(self, mail_to): # -> None:
        ...

    def get_mail_to(self): # -> list[tuple[Unknown | str | bytes | None, Unknown | str | bytes | None]]:
        ...

    mail_to = ...
    def set_cc(self, addr): # -> None:
        ...

    def get_cc(self): # -> list[tuple[Unknown | str | bytes | None, Unknown | str | bytes | None]]:
        ...

    cc = ...
    def set_bcc(self, addr): # -> None:
        ...

    def get_bcc(self): # -> list[tuple[Unknown | str | bytes | None, Unknown | str | bytes | None]]:
        ...

    bcc = ...
    def get_recipients_emails(self): # -> list[Unknown | str | bytes | None]:
        """
        Returns message recipient's emails for actual sending.
        :return: list of emails
        """
        ...

    def set_headers(self, headers): # -> None:
        ...

    def set_html(self, html, url=...): # -> None:
        ...

    def get_html(self):
        ...

    html = ...
    def set_text(self, text, url=...): # -> None:
        ...

    def get_text(self):
        ...

    text = ...
    @property
    @renderable
    def html_body(self):
        ...

    @property
    @renderable
    def text_body(self):
        ...

    def set_subject(self, value): # -> None:
        ...

    @renderable
    def get_subject(self):
        ...

    subject = ...
    def render(self, **kwargs): # -> None:
        ...

    def set_date(self, value): # -> None:
        ...

    def get_date(self): # -> str | None:
        ...

    date = ...
    message_date = ...
    @property
    def message_id(self): # -> None:
        ...

    @message_id.setter
    def message_id(self, value): # -> None:
        ...

    @property
    def attachments(self): # -> filestore_cls:
        ...

    def attach(self, **kwargs): # -> None:
        ...



class MessageBuildMixin:
    ROOT_PREAMBLE = ...
    ADDRESS_HEADERS = ...
    before_build = ...
    after_build = ...
    def encode_header(self, value): # -> str:
        ...

    def encode_address_header(self, pair): # -> LiteralString | None:
        ...

    encode_name_header = ...
    def set_header(self, msg, key, value, encode=...): # -> None:
        ...

    def build_message(self, message_cls=...): # -> SafeMIMEMultipart:
        ...

    _build_message = ...
    def as_message(self, message_cls=...): # -> SafeMIMEMultipart:
        ...

    message = ...
    def as_string(self, message_cls=...): # -> str:
        """
        Returns message as string.

        Note: this method costs one less message-to-string conversions
        for dkim in compare to self.as_message().as_string()

        Changes:
        v0.4.2: now returns bytes, not native string
        """
        ...



class MessageSendMixin:
    smtp_pool_factory = ObjectFactory
    smtp_cls = SMTPBackend
    @cached_property
    def smtp_pool(self): # -> smtp_pool_factory:
        ...

    def send(self, to=..., set_mail_to=..., mail_from=..., set_mail_from=..., render=..., smtp_mail_options=..., smtp_rcpt_options=..., smtp=...):
        ...



class MessageTransformerMixin:
    transformer_cls = ...
    _transformer = ...
    def create_transformer(self, transformer_cls=..., **kw): # -> MessageTransformer:
        ...

    def destroy_transformer(self): # -> None:
        ...

    @property
    def transformer(self): # -> MessageTransformer | None:
        ...

    def transform(self, **kwargs): # -> None:
        ...

    def set_html(self, **kw): # -> None:
        ...



class MessageSignMixin:
    signer_cls = DKIMSigner
    _signer = ...
    def sign(self, **kwargs): # -> Self@MessageSignMixin:
        ...

    dkim = ...
    def sign_message(self, msg):
        """
        Add sign header to email.Message
        """
        ...

    def sign_string(self, message_string): # -> bytes:
        """
        Add sign header to message-as-a-string
        """
        ...



class Message(MessageSendMixin, MessageTransformerMixin, MessageSignMixin, MessageBuildMixin, BaseMessage):
    """
    Email message with:
    - DKIM signer
    - smtp send
    - Message.transformer object
    """
    ...


def html(**kwargs): # -> Message:
    ...

class DjangoMessageProxy:
    """
    Class obsoletes with emails.django_.DjangoMessage

    Class looks like django.core.mail.EmailMessage for standard django email backend.

    Example usage:

        message = emails.Message(html='...', subject='...', mail_from='robot@company.ltd')
        connection = django.core.mail.get_connection()

        message.set_mail_to('somebody@somewhere.net')
        connection.send_messages([DjangoMessageProxy(message), ])
    """
    def __init__(self, message, recipients=..., context=...) -> None:
        ...

    def recipients(self): # -> list[Unknown]:
        ...

    def message(self):
        ...
